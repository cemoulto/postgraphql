exports[`test forum example 1`] = `
"schema {
  query: Query
}

type CompoundKey implements Node {
  __id: ID!
  personId2: Int!
  personId1: Int!
}

scalar Email

interface Node {
  __id: ID!
}

type NoUpdate {
  column: Int
}

type Person implements Node {
  __id: ID!
  id: Int!
  name: String!
  about: String
  email: Email
  createdAt: String
}

type Post implements Node {
  __id: ID!
  id: Int!
  headline: String!
  body: String
  authorId: Int
}

type Query {
  node(__id: ID!): Node
  post(__id: ID!): Post
  postById(id: Int!): Post
  person(__id: ID!): Person
  personById(id: Int!): Person
  personByEmail(email: Email): Person
  compoundKey(__id: ID!): CompoundKey
  compoundKeyByPersonId1AndPersonId2(personId1: Int!, personId2: Int!): CompoundKey
}

type UpdatableView {
  __id: Int
  name: String
  description: String
  constant: Int
}
"
`;

exports[`test forum example 2`] = `
"schema {
  query: Query
}

type CompoundKey implements Node {
  id: ID!
  personId2: Int!
  personId1: Int!
}

scalar Email

interface Node {
  id: ID!
}

type NoUpdate {
  column: Int
}

type Person implements Node {
  id: ID!
  rowId: Int!
  name: String!
  about: String
  email: Email
  createdAt: String
}

type Post implements Node {
  id: ID!
  rowId: Int!
  headline: String!
  body: String
  authorId: Int
}

type Query {
  node(id: ID!): Node
  post(id: ID!): Post
  postByRowId(rowId: Int!): Post
  person(id: ID!): Person
  personByRowId(rowId: Int!): Person
  personByEmail(email: Email): Person
  compoundKey(id: ID!): CompoundKey
  compoundKeyByPersonId1AndPersonId2(personId1: Int!, personId2: Int!): CompoundKey
}

type UpdatableView {
  __id: Int
  name: String
  description: String
  constant: Int
}
"
`;
